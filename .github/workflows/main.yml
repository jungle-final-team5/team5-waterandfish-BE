name: Deploy Backend to EC2 (No Appleboy)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. .env.production 파일 생성 (Secrets에서)
      - name: Create .env.production
        run: |
          echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> .env.production
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env.production
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.production
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.production
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env.production
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env.production
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=60" >> .env.production
          echo "ALGORITHM=HS256" >> .env.production
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env.production
          echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env.production
          echo "CORS_ORIGINS=[\"http://13.209.142.150\"]" >> .env.production
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env.production
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.production
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.production
          echo "AWS_REGION=ap-northeast-2" >> .env.production

      # 3. AWS 인증 정보 설정 (ECR 접근을 위해 필요)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 4. ECR에 Docker 로그인
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
     
      # Docker 이미지 빌드 & 푸시
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest .
          docker push  ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # .env.production 파일을 EC2로 복사
      - name: Copy .env.production to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env.production"
          target: "~/.env.production"

      # 8. EC2에 SSH로 접속해 배포 (docker-compose 없이)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 내부에서 ECR 인증
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            # ECR에서 이미지 pull
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend -p 8000:8000 \
              --env-file ~/.env.production \
              ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

# 주의: secrets.ECR_REGISTRY는 예시로 724772079310.dkr.ecr.ap-northeast-2.amazonaws.com
#       secrets.ECR_REPOSITORY는 예시로 waterandfish-backend